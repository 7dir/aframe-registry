{"https://unpkg.com/aframe-mountain-component@0.3.x/package.json":{"name":"aframe-mountain-component","version":"0.3.1","description":"Mountain terrain in A-Frame using randomly-generated height maps","main":"index.js","scripts":{"build":"browserify examples/main.js -o examples/build.js","dev":"budo examples/main.js:build.js --dir examples --port 8008 --live --open","dist":"webpack index.js dist/aframe-mountain-component.js && webpack -p index.js dist/aframe-mountain-component.min.js","postpublish":"npm run dist"},"repository":{"type":"git","url":"git+https://github.com/ngokevin/kframe.git"},"keywords":["aframe","aframe-component","aframe-vr","vr","mozvr","webvr"],"author":"Kevin Ngo <me@ngokevin.com>","license":"MIT","bugs":{"url":"https://github.com/ngokevin/kframe/issues"},"homepage":"https://github.com/ngokevin/kframe/tree/components/mountain#readme","devDependencies":{"aframe":"^0.3.1","browserify":"^12.0.1","budo":"^8.1.0","webpack":"^1.12.9"}},"https://unpkg.com/aframe-bmfont-text-component@0.1.x/package.json":{"name":"aframe-bmfont-text-component","version":"0.1.4","description":"BMFont Text component for A-Frame.","main":"index.js","scripts":{"build":"browserify docs/main.js -o docs/build.js","dev":"budo docs/main.js:build.js --dir docs --port 8000 --live --open","dist":"webpack index.js dist/aframe-bmfont-text-component.js && webpack -p index.js dist/aframe-bmfont-text-component.min.js","postpublish":"npm run dist","start":"npm run dev"},"repository":{"type":"git","url":"git+https://github.com/bryik/aframe-bmfont-text-component.git"},"keywords":["aframe","aframe-component","aframe-vr","vr","mozvr","webvr"],"author":"Ben Pyrik <ben@wsundine.com>","license":"MIT","bugs":{"url":"https://github.com/bryik/aframe-bmfont-text-component/issues"},"homepage":"https://github.com/bryik/aframe-bmfont-text-component#readme","devDependencies":{"aframe":"^0.3.1","browserify":"^13.1.0","browserify-css":"^0.9.1","budo":"^9.0.0","eslint":"^3.3.1","eslint-config-semistandard":"^6.0.2","eslint-config-standard":"^5.3.1","eslint-plugin-promise":"^1.3.2","eslint-plugin-react":"^5.2.2","eslint-plugin-standard":"^1.3.2","inquirer":"^1.1.2","shelljs":"^0.7.3","webpack":"^1.13.2"},"dependencies":{"load-bmfont":"^1.2.3","object-assign":"^4.1.0","three-bmfont-text":"^2.1.0"}},"https://unpkg.com/aframe-sun-sky@^3.0.1/package.json":{"name":"aframe-sun-sky","version":"3.0.1","description":"Gradient sky with adjustable sun in A-Frame","main":"index.js","scripts":{"dist":"webpack --module-bind 'glsl=shader' index.js dist/aframe-sun-sky.js && webpack --module-bind 'glsl=shader' -p index.js dist/aframe-sun-sky.min.js","postpublish":"npm run dist"},"repository":{"type":"git","url":"git+https://github.com/ngokevin/kframe.git"},"keywords":["aframe","aframe-component","aframe-shader","aframe-vr","vr","mozvr","webvr"],"author":"Kevin Ngo <me@ngokevin.com>","license":"MIT","bugs":{"url":"https://github.com/ngokevin/kframe/issues"},"homepage":"https://github.com/ngokevin/kframe/tree/components/sun-sky#readme","devDependencies":{"aframe":"^0.3.0"}},"https://unpkg.com/aframe-text-component@0.3.x/package.json":{"name":"aframe-text-component","version":"0.3.0","description":"Text component for A-Frame VR.","main":"index.js","scripts":{"build":"browserify examples/main.js -o examples/build.js","dev":"budo examples/main.js:build.js --dir examples --port 8008 --live --open","dist":"webpack index.js dist/aframe-text-component.js && webpack -p index.js dist/aframe-text-component.min.js","postpublish":"npm run dist","preghpages":"npm run build && rm -rf gh-pages && cp -r examples gh-pages","ghpages":"npm run preghpages && ghpages -p gh-pages","test":"karma start ./tests/karma.conf.js"},"repository":{"type":"git","url":"git+https://github.com/ngokevin/aframe-text-component.git"},"keywords":["aframe","aframe-component","layout","aframe-vr","vr","aframe-layout","mozvr","webvr"],"author":"Kevin Ngo <me@ngokevin.com>","license":"MIT","bugs":{"url":"https://github.com/ngokevin/aframe-text-component/issues"},"homepage":"https://github.com/ngokevin/aframe-text-component#readme","devDependencies":{"aframe":"^0.2.0","browserify":"^12.0.1","browserify-css":"^0.8.3","budo":"^8.1.0","chai":"^3.4.1","chai-shallow-deep-equal":"^1.3.0","ghpages":"0.0.3","karma":"^0.13.15","karma-browserify":"^4.4.2","karma-chai-shallow-deep-equal":"0.0.4","karma-firefox-launcher":"^0.1.7","karma-mocha":"^0.2.1","karma-mocha-reporter":"^1.1.3","karma-sinon-chai":"^1.1.0","mocha":"^2.3.4","watchify":"^3.6.1","webpack":"^1.12.9"}},"https://unpkg.com/aframe-physics-system@^1.0.1/package.json":{"name":"aframe-physics-system","version":"1.0.2","description":"Physics system for A-Frame VR, built on Cannon.js","main":"index.js","scripts":{"dev":"budo browser.js:bundle.js -d examples --port 8000","dist":"browserify browser.js -o dist/aframe-physics-system.js && uglifyjs -c -o dist/aframe-physics-system.min.js -- dist/aframe-physics-system.js","test":"echo \"Error: no test specified\" && exit 1","version":"npm run dist && git add -A dist","postversion":"git push && git push --tags && npm publish"},"repository":{"type":"git","url":"git+https://github.com/donmccurdy/aframe-physics-system.git"},"keywords":["aframe","aframevr","vr","three","physics","cannon","webgl","webvr"],"author":"Don McCurdy <dm@donmccurdy.com> (https://www.donmccurdy.com)","license":"MIT","bugs":{"url":"https://github.com/donmccurdy/aframe-physics-system/issues"},"homepage":"https://github.com/donmccurdy/aframe-physics-system#readme","dependencies":{"cannon":"^0.6.2","three-to-cannon":"^1.0.0"},"peerDependencies":{"aframe":"^0.3.1"},"devDependencies":{"aframe":"^0.3.1","browserify":"^13.1.0","budo":"^9.2.1","uglify-js":"^2.7.3"}},"https://unpkg.com/aframe-stereo-component@0.2.x/package.json":{"name":"aframe-stereo-component","version":"0.2.0","description":"Stereoscopic component for A-Frame VR.","main":"index.js","scripts":{"build":"browserify examples/main.js -o examples/build.js","dev":"budo examples/main.js:build.js --dir examples --port 8000 --live --open","dist":"webpack browser.js dist/aframe-stereo-component.js && webpack -p browser.js dist/aframe-stereo-component.min.js","postpublish":"npm run dist","preghpages":"npm run build && rm -rf gh-pages && cp -r examples gh-pages","ghpages":"npm run preghpages && ghpages -p gh-pages","test":"karma start ./tests/karma.conf.js","unboil":"node scripts/unboil.js"},"repository":{"type":"git","url":"https://github.com/oscarmarinmiro/aframe-stereo-component.git"},"keywords":["aframe","aframe-component","layout","aframe-vr","vr","aframe-layout","mozvr","webvr","stereo","stereoscopic","video","equirectangular"],"author":"Óscar Marín Miró <oscar@outliers.es> @oscarmarinmiro","license":"MIT","bugs":{"url":"https://github.com/oscarmarinmiro/aframe-stereo-component/issues"},"homepage":"https://github.com/oscarmarinmiro/aframe-stereo-component#readme","devDependencies":{"aframe":"^0.2.0","browserify":"^12.0.1","browserify-css":"^0.8.3","budo":"^7.1.0","chai":"^3.4.1","chai-shallow-deep-equal":"^1.3.0","ghpages":"0.0.3","inquirer":"^0.12.0","karma":"^0.13.15","karma-browserify":"^4.4.2","karma-chai-shallow-deep-equal":"0.0.4","karma-firefox-launcher":"^0.1.7","karma-mocha":"^0.2.1","karma-mocha-reporter":"^1.1.3","karma-sinon-chai":"^1.1.0","mocha":"^2.3.4","shelljs":"^0.6.0","webpack":"^1.12.9"}},"https://unpkg.com/aframe-text-component@0.1.x/package.json":{"name":"aframe-text-component","version":"0.1.0","description":"Text component for A-Frame VR.","main":"index.js","scripts":{"test":"karma start ./tests/karma.conf.js"},"repository":{"type":"git","url":"git+https://github.com/ngokevin/aframe-text-component.git"},"keywords":["aframe","aframe-component","layout","aframe-vr","vr","aframe-layout","mozvr","webvr"],"author":"Kevin Ngo <me@ngokevin.com>","license":"MIT","bugs":{"url":"https://github.com/ngokevin/aframe-text-component/issues"},"homepage":"https://github.com/ngokevin/aframe-text-component#readme","devDependencies":{"aframe-core":"^0.1.3","browserify-css":"^0.8.3","chai":"^3.4.1","chai-shallow-deep-equal":"^1.3.0","karma":"^0.13.15","karma-browserify":"^4.4.2","karma-chai-shallow-deep-equal":"0.0.4","karma-firefox-launcher":"^0.1.7","karma-mocha":"^0.2.1","karma-mocha-reporter":"^1.1.3","karma-sinon-chai":"^1.1.0","mocha":"^2.3.4"}},"https://unpkg.com/aframe-sun-sky@^3.0.1/README.md":{"text":"## aframe-sky-shader\n\n### Usage\n\n#### Browser Installation\n\nInstall and use by directly including the [browser files](dist):\n\n```html\n<head>\n  <title>My A-Frame Scene</title>\n  <script src=\"https://aframe.io/releases/0.3.0/aframe.min.js\"></script>\n  <script src=\"https://rawgit.com/ngokevin/kframe/tree/master/components/sun-sky/dist/aframe-sun-sky.min.js\"></script>\n</head>\n\n<body>\n  <a-scene>\n    <a-sun-sky></a-sun-sky>\n  </a-scene>\n</body>\n```\n\n#### NPM Installation\n\nInstall via NPM:\n\n```bash\nnpm install aframe-sun-sky\n```\n\nThen register and use.\n\n```js\nrequire('aframe');\nrequire('aframe-sun-sky');\n```\n","url":"https://unpkg.com/aframe-sun-sky@^3.0.1/README.md"},"https://unpkg.com/aframe-mountain-component@0.3.x/README.md":{"text":"## aframe-mountain-component\n\nMountain component and primitive for A-Frame.\n\n![Screenshot](https://cloud.githubusercontent.com/assets/674727/18611595/c98bc48e-7cf2-11e6-8e2a-2110fbfe0ff0.png)\n\nUses Perlin noise to create a height map, create a shaded texture from that\nheight map using a `<canvas>`, and using the height map to create vertices on a\nBufferGeometry.\n\n## Properties\n\n| Property    | Description                     | Default Value    |\n| --------    | -----------                     | -------------    |\n| color       | Base color of mountain.         | rgb(92, 32, 0)   |\n| shadowColor | Diffuse color of mountain.      | rgb(128, 96, 96) |\n| sunPosition | Sun position to shade mountain. | 1, 1, 1          |\n\n### Usage\n\n#### Browser Installation\n\nInstall and use by directly including the [browser files](dist):\n\n```html\n<head>\n  <title>My A-Frame Scene</title>\n  <script src=\"https://aframe.io/releases/0.3.0/aframe.min.js\"></script>\n  <script src=\"https://rawgit.com/ngokevin/kframe/tree/master/components/mountain/dist/aframe-mountain-component.min.js\"></script>\n</head>\n\n<body>\n  <a-scene>\n    <a-mountain color=\"red\"></a-mountain>\n    <!-- <a-entity mountain=\"color: red\"></a-entity> -->\n  </a-scene>\n</body>\n```\n\n#### NPM Installation\n\nInstall via NPM:\n\n```bash\nnpm install aframe-mountain-component\n```\n\nThen register and use.\n\n```js\nrequire('aframe');\nrequire('aframe-mountain-component');\n```\n","url":"https://unpkg.com/aframe-mountain-component@0.3.x/README.md"},"https://unpkg.com/aframe-bmfont-text-component@0.1.x/README.md":{"text":"## aframe-bmfont-text-component\r\n\r\nThis component is useful for rendering bitmap and signed distance field font text in [A-Frame](https://aframe.io). Basically, it wraps Matt DesLauriers' [three-bmfont-text](https://github.com/Jam3/three-bmfont-text) and [load-bmfont](https://github.com/Jam3/load-bmfont).\r\n\r\n![screenshot](http://i.imgur.com/pDDlzAX.png)\r\n\r\n## Properties\r\n\r\n|    Property   |          Description         |     Default Value     |\r\n|:-------------:|:----------------------------:|:---------------------:|\r\n|      text     |  the text you want to appear |          None         |\r\n|     width     |     width of the text box    |          None         |\r\n|     align     |   'left', 'center', 'right'  |          left         |\r\n| letterSpacing | the letter spacing in pixels |           0           |\r\n|   lineHeight  |   the line height in pixels  |           38          |\r\n|      fnt      |      path to 'fnt' file      | https://cdn.rawgit... |\r\n|    fntImage   |    path to font image file   | https://cdn.rawgit... |\r\n|      mode     |      'pre' and 'nowrap'      |        'normal'       |\r\n|     color     |     by RGB, hex, or name     |          #000         |\r\n|    opacity    |    Extent of transparency.   |          1.0          |\r\n\r\nMore details on these properties [here](https://github.com/Jam3/three-bmfont-text#usage).\r\n\r\nExplanation of 'mode' property [here](https://github.com/mattdesl/word-wrapper).\r\n\r\n## Usage\r\n\r\nWrite some text:\r\n\r\n```html\r\n<a-entity bmfont-text=\"text: Hello World;\"></a-entity>\r\n```\r\n\r\nRather than add the bmfont-text component to a blank entity, you can try using the **text primitive**:\r\n\r\n```html\r\n<a-text text=\"Hello World;\"></a-text>\r\n```\r\n\r\nThis is more convenient, but experimental and buggy (e.g. color failing to apply).\r\n\r\nTo change the size of the text, use the [scale](https://aframe.io/docs/0.2.0/components/scale.html) component or position the text closer or further away.\r\n\r\nText can be wrapped by specifying width, but I'm not sure what units three-bmfont-text uses. You will have to play around a bit.\r\n\r\n## Custom Fonts\r\n\r\nA guide for generating SDF fonts can be found [here](https://github.com/libgdx/libgdx/wiki/Distance-field-fonts); here is an example comparing [Arial Black and DejaVu](http://i.imgur.com/iWtXHm5.png). Bitmap fonts also work, but do not look nearly as good.\r\n\r\nDifferent fonts can be specified with the 'fnt' and 'fntImage' properties.\r\n\r\n```html\r\n<a-entity bmfont-text=\"text: Hello World; fnt:../fonts/DejaVu-sdf.fnt; fntImage:../fonts/DejaVu-sdf.png\">\r\n</a-entity>\r\n```\r\n\r\nThanks to [RawGit](http://rawgit.com/), these default to hosted \"DejaVu-sdf.fnt\" and \"DejaVu-sdf.png\" files.\r\n\r\n## Limitations\r\n\r\nThis component does not make use of all of the features of [three-bmfont-text](https://github.com/Jam3/three-bmfont-text) and its sister modules, if you require more advanced functionality such as tabSize and start and end indices, I recommend forking this component and modifying it. Pull requests are welcome, but please include a test example.\r\n\r\nBitmap font rendering limits you to the characters included in the font (Unicode this is not). SDF font (in particular) tends to smooth sharp edges though [there are ways around this](https://lambdacube3d.wordpress.com/2014/11/12/playing-around-with-font-rendering/).\r\n\r\n#### Additional Information\r\n\r\nIf you are interested in text rendering in WebGL/ThreeJS/A-Frame and want to learn more, I recommend reading the documentation for [three-bmfont-text](https://github.com/Jam3/three-bmfont-text). \r\n\r\nHere are some additional resources:\r\n\r\n- ['It’s 2015 and drawing text is still hard (WebGL, ThreeJS)' by Parris Khachi](https://www.eventbrite.com/engineering/its-2015-and-drawing-text-is-still-hard-webgl-threejs/)\r\n- [Valve's original paper](http://www.valvesoftware.com/publications/2007/SIGGRAPH2007_AlphaTestedMagnification.pdf)\r\n- ['Hacking with THREE.js' by Matt DesLauriers](http://slides.com/mattdeslauriers/hacking-with-three-js#/13)\r\n\r\n## Installation\r\n\r\n#### Browser\r\n\r\nInstall and use by directly including the [browser files](dist):\r\n\r\n```html\r\n<head>\r\n  <title>My A-Frame Scene</title>\r\n  <script src=\"https://aframe.io/releases/0.3.0/aframe.min.js\"></script>\r\n  <script src=\"https://rawgit.com/bryik/aframe-bmfont-text-component/master/dist/aframe-bmfont-text-component.min.js\"></script>\r\n</head>\r\n\r\n<body>\r\n  <a-scene>\r\n    <a-entity bmfont-text=\"text: Hello world\"></a-entity>\r\n  </a-scene>\r\n</body>\r\n```\r\n\r\n#### NPM\r\n\r\nInstall via NPM:\r\n\r\n```bash\r\nnpm install aframe-bmfont-text-component\r\n```\r\n\r\nThen register and use.\r\n\r\n```js\r\nrequire('aframe');\r\nrequire('aframe-bmfont-text-component');\r\n```\r\n","url":"https://unpkg.com/aframe-bmfont-text-component@0.1.x/README.md"},"https://unpkg.com/aframe-text-component@0.3.x/README.md":{"text":"## aframe-text-component\n\nA text geometry component for [A-Frame](https://aframe.io) VR. The text geometry\ncomponent (shape) can be paired with the [material component](https://aframe.io/docs/components/material.html) (appearance).\n\n![screenshot](https://cloud.githubusercontent.com/assets/674727/11915616/59342aca-a663-11e5-9b6b-8a0b243fe5da.png)\n\n## Properties\n\n| Property       | Description | Default Value |\n| --------       | ----------- | ------------- |\n| bevelEnabled   |             | false         |\n| bevelSize      |             | 8             |\n| bevelThickness |             | 12            |\n| curveSegments  |             | 12            |\n| font           |             | helvetiker    |\n| height         |             | 0.05          |\n| size           |             | 0.5           |\n| style          |             | normal        |\n| text           |             | None          |\n\n### Usage\n\n#### Browser Installation\n\nInstall and use by directly including the [browser files](dist):\n\n```html\n<head>\n  <title>My A-Frame Scene</title>\n  <script src=\"https://aframe.io/releases/0.2.0/aframe.min.js\"></script>\n  <script src=\"https://rawgit.com/ngokevin/aframe-text-component/master/dist/aframe-text-component.min.js\"></script>\n</head>\n\n<body>\n  <a-scene>\n    <a-entity text=\"text: What's up\"></a-entity>\n  </a-scene>\n</body>\n```\n\n#### NPM Installation\n\nInstall via NPM:\n\n```bash\nnpm install aframe-text-component\n```\n\nThen register and use.\n\n```js\nrequire('aframe');\nrequire('aframe-text-component');\n```\n\n## Using Different Fonts\n\nThe text component uses `typeface.js`, fonts defined in JS files for three.js.\ntypeface fonts can be generated from regular fonts using this [typeface\nfont generator](http://gero3.github.io/facetype.js/). You can also find some\nsample generated fonts, currently in the `examples/fonts` directory in the [three.js\nrepository](https://github.com/mrdoob/three.js).\n\nBy default, the text component only comes with one typeface font, Helvetiker\n(Regular). Each font is fairly large, from at least 60KB to hundreds of KBs.\n\nTo include a font for use with the text component, append or require the\ntypeface font *after* this component. This component uses `FontUtils` which\nshould be initialized before adding fonts.\n\nFor example in HTML:\n\n```html\n<html>\n  <head>\n    <title>My A-Frame Scene</title>\n    <script src=\"https://aframe.io/releases/0.2.0/aframe.min.js\"></script>\n    <script src=\"https://rawgit.com/ngokevin/aframe-text-component/master/dist/aframe-text-component.min.js\"></script>\n    <script src=\"myfont.typeface.js\"></script>\n  </head>\n  <body>\n    <a-scene>\n      <a-assets>\n        <a-mixin id=\"font\" text=\"font: myfont\"></a-mixin>\n      </a-assets>\n      <a-entity mixin=\"font\" text=\"text: Hello\"></a-entity>\n      <a-entity mixin=\"font\" text=\"text: World\"></a-entity>\n    </a-scene>\n  </body>\n</html>\n```\n\nOr in JS:\n\n```js\nrequire('aframe');\nrequire('aframe-text-component');\nrequire('./fonts/myfont.typeface');\n```\n","url":"https://unpkg.com/aframe-text-component@0.3.x/README.md"},"https://unpkg.com/aframe-physics-system@^1.0.1/README.md":{"text":"# Physics for A-Frame VR\n\nComponents for A-Frame physics integration, built on [CANNON.js](http://schteppe.github.io/cannon.js/).\n\n![d6590832-8bdb-11e6-9336-658b00bc0460 3](https://cloud.githubusercontent.com/assets/1848368/19297499/806d059a-9013-11e6-9b20-c03294acbc4c.png)\n\n> Image credit [@andgokevin](https://twitter.com/andgokevin).\n\n## Components\n\nThe `dynamic-body` and `static-body` components may be added to any `<a-entity/>` that contains a mesh. Generally, each scene will have at least one `static-body` for the ground, and one or more `dynamic-body` instances that the player can interact with.\n\n- **dynamic-body**: A freely-moving object. Dynamic bodies have mass, collide with other objects, bounce or slow during collisions, and fall if gravity is enabled.\n- **static-body**: A fixed-position or animated object. Other objects may collide with static bodies, but static bodies themselves are unaffected by gravity and collisions.\n\n## Basic Usage\n\n```html\n<!-- The debug:true option creates a wireframe around each physics body. If you don't see a wireframe,\n     the physics system may be unable to parse your model without a shape:box or shape:hull option. -->\n<a-scene physics=\"debug: true\">\n\n  <!-- Camera -->\n  <a-entity camera universal-controls kinematic-body></a-entity>\n\n  <!-- Floor -->\n  <a-grid static-body></a-grid>\n\n  <!-- Immovable box -->\n  <a-box static-body position=\"0 0.5 -5\" width=\"3\" height=\"1\" depth=\"1\"></a-box>\n\n  <!-- Dynamic box -->\n  <a-box dynamic-body position=\"5 0.5 0\" width=\"1\" height=\"1\" depth=\"1\"></a-box>\n\n</a-scene>\n```\n\n## Using the CANNON.js API\n\nFor more advanced physics, use the CANNON.js API with custom JavaScript and A-Frame components. The [CANNON.js documentation](http://schteppe.github.io/cannon.js/docs/) and source code offer good resources for learning to work with physics in JavaScript.\n\nIn A-Frame, each entity's `CANNON.Body` instance is exposed on the `el.body` property. To apply a quick push to an object, you might do the following:\n\n```html\n<a-scene>\n  <a-entity id=\"nyan\" dynamic-body=\"shape: hull\" obj-model=\"obj: url(nyan-cat.obj)\"></a-entity>\n  <a-grid static-body><a/grid>\n</a-scene>\n```\n\n```javascript\nvar el = sceneEl.querySelector('#nyan');\nel.body.applyImpulse(\n  /* impulse */        new CANNON.Vec3(0, 1, -1),\n  /* world position */ new CANNON.Vec3().copy(el.getComputedAttribute('position'))\n);\n```\n\n## Body Shapes\n\nBody components will attempt to find an appropriate CANNON.js shape to fit your model. When defining an object you may choose a shape or leave the default, `auto`. Select a shape carefully, as there are performance implications with different choices:\n\n* **Auto** (`auto`) – Chooses automatically from the available shapes.\n* **Box** (`box`) – Great performance, compared to Hull or Trimesh shapes, and may be fitted to custom models.\n* **Cylinder** (`cylinder`) – See `box`. Adds `cylinderAxis` option.\n* **Sphere** (`sphere`) – See `box`. Adds `sphereRadius` option.\n* **Convex** (`hull`) – Wraps a model like shrink-wrap. Convex shapes are more performant and better supported than Trimesh, but may still have some performance impact when used as dynamic objects.\n* **Primitives** – Plane/Cylinder/Sphere. Used automatically with the corresponding A-Frame primitives.\n* **Trimesh** – *Deprecated.* Not available as a custom shape, but may be chosen as a last resort for custom geometry. Trimeshes adapt to fit custom geometry (e.g. a `.OBJ` or `.DAE` file), but have very minimal support. Arbitrary trimesh shapes are difficult to model in any JS physics engine, will \"fall through\" certain other shapes, and have serious performance limitations.\n* **Compound** – *In progress.* Compound shapes require a bit of work to set up, but allow you to use multiple primitives to define a physics shape around custom models. These will generally perform better, and behave more accurately, than Trimesh or Convex shapes. For example, a stool might be modeled as a cylinder-shaped seat, on four long cylindrical legs.\n\nFor more details, see the CANNON.js [collision matrix](https://github.com/schteppe/cannon.js#features).\n\nExample using a bounding box for a custom model:\n\n```html\n<!-- Box -->\n<a-entity obj-model=\"obj: url(...)\" dynamic-body=\"shape: box; mass: 2\"></a-entity>\n\n<!-- Cylinder -->\n<a-entity obj-model=\"obj: url(...)\" dynamic-body=\"shape: cylinder; cylinderAxis: y; mass: 5\"></a-entity>\n```\n\n## Collision Events\n\nCANNON.js generates events when a collision is detected, which are propagated onto the associated A-Frame entity. Example:\n\n```javascript\nvar playerEl = document.querySelector('[camera]');\nplayerEl.addEventListener('collide', function (e) {\n  console.log('Player has collided with body #' + e.detail.body.id);\n\n  e.detail.target.el;  // Original entity (playerEl).\n  e.detail.body.el;    // Other entity, which playerEl touched.\n  e.detail.contact;    // Stats about the collision (CANNON.ContactEquation).\n  e.detail.contact.ni; // Normal (direction) of the collision (CANNON.Vec3).\n});\n```\n\nNote that CANNON.js cannot perfectly detect collisions with very fast-moving bodies. Doing so requires Continuous Collision Detection, which can be both slow and difficult to implement. If this is an issue for your scene, consider (1) slowing objects down, (2) detecting collisions manually (collisions with the floor are easy – `position.y - height / 2 <= 0`), or (3) attempting a PR to CANNON.js. See: [Collision with fast bodies](https://github.com/schteppe/cannon.js/issues/202).\n\n## Configuration\n\nContact materials define what happens when two objects meet, including physical properties such as friction and restitution (bounciness). The default, scene-wide contact materials may be configured on the scene element:\n\n```html\n<a-scene physics=\"friction: 0.1; restitution: 0.5\">\n  <!-- ... -->\n</a-scene>\n```\n\n| Property                        | Default | Description                                        |\n|---------------------------------|---------|----------------------------------------------------|\n| debug                           | true    | Whether to show wireframes for debugging.          |\n| gravity                         | -9.8    | Force of gravity (in m/s^2).                       |\n| iterations                      | 10      | The number of solver iterations determines quality of the constraints in the world. The more iterations, the more correct simulation. More iterations need more computations though. If you have a large gravity force in your world, you will need more iterations. |\n| maxInterval                     | 0.0667  | Maximum simulated time (in milliseconds) that may be taken by the physics engine per frame. Effectively prevents weird \"jumps\" when the player returns to the scene after a few minutes, at the expense of pausing physics during this time. |\n| friction                        | 0.01    | Coefficient of friction.                           |\n| restitution                     | 0.3     | Coefficient of restitution (bounciness).           |\n| contactEquationStiffness        | 1e8     | Stiffness of the produced contact equations.       |\n| contactEquationRelaxation       | 3       | Relaxation time of the produced contact equations. |\n| frictionEquationStiffness       | 1e8     | Stiffness of the produced friction equations.      |\n| frictionEquationRegularization  | 3       | Relaxation time of the produced friction equations |\n\nMore advanced configuration, including specifying different collision behaviors for different objects, is available through the CANNON.js JavaScript API.\n\nResources:\n\n* [CANNON.World](http://schteppe.github.io/cannon.js/docs/classes/World.html)\n* [CANNON.ContactMaterial](http://schteppe.github.io/cannon.js/docs/classes/ContactMaterial.html)\n\n","url":"https://unpkg.com/aframe-physics-system@^1.0.1/README.md"},"https://unpkg.com/aframe-stereo-component@0.2.x/README.md":{"text":"## aframe-stereo-component\n\nA stereo component for [A-Frame](https://aframe.io) VR.\n\nThis component builds on the ['layer' concept of THREE.js] (https://github.com/mrdoob/three.js/issues/6437) and is really two components in one:\n- **'stereocam' component**, with tells an aframe camera which 'eye' to render in case of monoscopic display (without 'Entering VR'). The camera will render all entities without the stereo component, but if it encounters an entity with the 'stereo' component active, it will render only those in the same eye as defined here.\n- **'stereo' component**, which tells aframe to include an entity in either the 'right' eye or 'left' eye (you can also specify 'both', but this has the same effect as not using the 'stereo' component. *The component also enables stereoscopic video rendering projected on spheres*, so if a sphere (see example below) has the 'stereo' component enabled, if will only project half of the video texture (which one depends on the 'eye' property), so the result is stereoscopic video rendering, if you include two spheres. The component expects videos in side-by-side equirectangular projection (see the video example below).\n\nIf a video is used in a sphere with the 'stereo' component active, **the component will also enable playback in mobile devices, by attaching a 'click' event on the rendering canvas**. Thus, in mobile devices you must click on the screen (via cardboard v2.0 button or with your finger) for the video to start playing.\n\nYou can see demos for both examples below [here] (http://oscarmarinmiro.github.io/aframe-stereo-component)\n\n### 'stereocam' component properties (only for camera)\n\n| Property | Description | Default Value |\n| -------- | ----------- | ------------- |\n| eye      |  which eye is enabled in monoscopic display ('left' or 'right')           | 'left               |\n\n### 'stereo' component properties (for other entities)\n| Property | Description | Default Value |\n| -------- | ----------- | ------------- |\n| eye      |  in which eye the entity is render VR mode ('left' or 'right')           | 'left               |\n| mode     | this property is for spheres holding a video texture. mode can be 'full' or 'half', depending if the original video is full 360 or only spans 180 degrees horizontally (half-dome)| 'full' |\n\n### Usage\n\n![\"Stereoscopic video\"](/video_stereo.png?raw=true \"Stereoscopic video\")\n\n#### Browser Installation. 360 stereoscopic video example\n\nInstall and use by directly including the [browser files](dist):\n\n```html\n<html>\n<head>\n  <title>My A-Frame Scene</title>\n  <script src=\"https://aframe.io/releases/latest/aframe.min.js\"></script>\n  <script src=\"aframe-stereo-component.js.min.js\"></script>\n</head>\n<body>\n    <a-scene>\n\n    <a-assets>\n\n<!--\n      stereoscopic panoramic render by\n      http://pedrofe.com/rendering-for-oculus-rift-with-arnold/\n      http://www.meryproject.com/\n -->\n      <!-- side by side equirectangular projected video -->\n      <video id=\"Mary\" src=\"examples/basic_development/textures/MaryOculus.webm\" loop></video>\n\n    </a-assets>\n\n      <!-- we tell here the camera to render (outside VR mode, in monoscopic mode) everything without the 'stereo' component active\n      and it it's active, only render those entities in the 'left' eye -->\n      \n      <a-camera position=\"0 0 10\" cursor-visible=\"false\" stereocam=\"eye:left;\"></a-camera>\n    \n      <!-- native sphere, will render on 'left' eye, and will take only the first half of the video for projection -->\n      \n      <a-entity geometry=\"primitive: sphere;\n                      radius: 100;\n                      segmentsWidth: 64;\n                      segmentsHeight: 64;\"\n              material=\"shader: flat; src: #Mary;\"\n              scale=\"-1 1 1\" stereo=\"eye:left\">\n      </a-entity>\n      \n      <!-- native sphere, will render on 'right' eye, and will take only the second half of the video for projection -->\n      \n      <a-entity geometry=\"primitive: sphere;\n                      radius: 100;\n                      segmentsWidth: 64;\n                      segmentsHeight: 64;\"\n              material=\"shader: flat; src: #Mary;\"\n              scale=\"-1 1 1\" stereo=\"eye:right\">\n      </a-entity>\n\n\n    </a-scene>\n\n </body>\n </html>\n\n\n```\n\n![\"Two cubes in a scene, each one for each eye\"](/cubes_stereo.png?raw=true \"Two cubes in a scene, each one for each eye\")\n\n#### Browser Installation. Two cubes, each one for each eye\n\nInstall and use by directly including the [browser files](dist):\n\n```html\n<html>\n<head>\n  <title>My A-Frame Scene</title>\n  <script src=\"https://aframe.io/releases/latest/aframe.min.js\"></script>\n  <script src=\"aframe-stereo-component.js.min.js\"></script>\n</head>\n<body>\n  <a-scene>\n      <a-sky color=\"#FFF\"></a-sky>\n      <a-light color=\"#333\" position=\"0 5 0\" type=\"ambient\" intensity=\"0.2\"></a-light>\n      <a-light type=\"point\" color=\"#EEE\" intensity=\"1.0\" position=\"3 3 10\"></a-light>\n      \n      <!-- 'left' eye entities will pass trough the camera in non-VR mode -->\n      \n      <a-camera position=\"0 0 10\" cursor-color=\"black\" stereocam=\"eye:left;\"></a-camera>\n\n      <!-- in VR mode, the first box is displayed only in the left eye, the second one in the right eye -->\n      \n      <a-entity geometry=\"primitive: box\" material=\"color: #C03546\" stereo=\"eye:left\"></a-entity>\n      <a-entity geometry=\"primitive: box\" material=\"color: #3546C0\" position=\"0 5 0\" stereo=\"eye: right\"></a-entity>\n      \n  </a-scene>\n\n </body>\n </html>\n\n\n```\n\n#### NPM Installation\n\nInstall via NPM:\n\n```bash\nnpm install aframe-layer-component\n```\n\nThen register and use.\n\n```js\nrequire('aframe');\nrequire('aframe-layer-component');\n```\n\n#### Credits\n\nThe video used in the examples is from http://pedrofe.com/rendering-for-oculus-rift-with-arnold/, from the project http://www.meryproject.com/\n\nBoilerplate code from https://github.com/ngokevin/aframe-component-boilerplate\n\nCode for adjusting sphere face vertex is from https://github.com/mrdoob/three.js/blob/master/examples/webvr_video.html\n","url":"https://unpkg.com/aframe-stereo-component@0.2.x/README.md"},"https://unpkg.com/aframe-text-component@0.1.x/README.md":{"text":"## aframe-text-component\n\nA text component for [A-Frame](https://aframe.io) VR.\n\n## Usage\n\n```bash\nnpm install aframe-text-component\n```\n\n```js\nAFrame = require('aframe-core');\nAFrame.registerComponent('text', require('aframe-text-component'));\n```\n\n| Property | Description | Default Value |\n| -------- | ----------- | ------------- |\n| bevelEnabled |             | false              |\n| bevelSize |             | 8              |\n| bevelThickness |             | 12              |\n| curveSegments |             | 12              |\n| font |             | helvetiker              |\n| height |             | 50              |\n| size |             | 12              |\n| style |             | normal              |\n| text |             | None              |\n| weight |             | normal              |\n","url":"https://unpkg.com/aframe-text-component@0.1.x/README.md"},"https://unpkg.com/aframe-animation-component@^3.0.2/package.json":{"name":"aframe-animation-component","version":"3.0.4","description":"Animations in A-Frame using anime.js","main":"index.js","scripts":{"build":"browserify examples/main.js -o examples/build.js","dev":"budo examples/main.js:build.js --dir examples --port 8000 --live --open","dist":"webpack index.js dist/aframe-animation-component.js && webpack -p index.js dist/aframe-animation-component.min.js","lint":"semistandard -v | snazzy","prepublish":"npm run dist"},"repository":{"type":"git","url":"git+https://github.com/ngokevin/kframe.git"},"keywords":["aframe","aframe-component","aframe-vr","vr","mozvr","webvr"],"author":"Kevin Ngo <me@ngokevin.com>","license":"MIT","bugs":{"url":"https://github.com/ngokevin/kframe/issues"},"homepage":"https://github.com/ngokevin/kframe/tree/components/animation#readme","devDependencies":{"aframe":"^0.3.0","aframe-bmfont-text-component":"^0.1.4","aframe-layout-component":"^1.2.0","aframe-template-component":"^3.1.1","browserify":"^13.0.0","budo":"^8.2.2","randomcolor":"^0.4.4","semistandard":"^8.0.0","shelljs":"^0.7.0","shx":"^0.1.1","snazzy":"^4.0.0","webpack":"^1.13.0"},"semistandard":{"ignore":["examples/build.js","dist/**"]},"dependencies":{"animejs":"^1.1.0"}},"https://unpkg.com/aframe-animation-component@^3.0.2/README.md":{"text":"## aframe-animation-component\n\nAn animation component for [A-Frame](https://aframe.io) using\n[anime.js](https://github.com/juliangarnier/anime).\n\n![animation](https://cloud.githubusercontent.com/assets/674727/16903995/34a56db0-4c42-11e6-9bd1-356b291f2d93.gif)\n\n### Why?\n\nA-Frame has an `<a-animation>` API out of the box. Why build a component version?\n\n- **Imperative Ergonomics:** Imperatively set animations and all of its\n  properties with a single `setAttribute` call. With `<a-animation>`, we must\n  do `createElement`, multiple `setAttribute`s, `appendChild`, and\n  `addEventListener('loaded')`.\n- **Synchronous:** Setting a component is synchronous, meaning it takes effect\n  immediately. With `<a-animation>`, we must wait for it to append to the DOM\n  and register a callback listener.\n- **Consistency with the Framework:** The animation component fits into\n  A-Frame's entity-component-system framework. The `<a-animation>` tag is the\n  only outlier in which we must use a DOM element to modify an entity.\n- **Simpler API:** The animation component uses anime.js, a popular and simple\n  JavaScript animation library. `<a-animation>`'s API is loosely based off of\n  Web Animations draft specification which is overly complex.\n- **Easier Maintenance:** The animation component uses A-Frame's component API\n  as well as anime.js. `<a-animation>` uses the Custom Element polyfill directly\n  with tween.js. anime.js's features makes the animation codebase much slimmer\n  (140 vs 550 lines of code).\n- **Features:** The animation component has the features of the newly popular\n  anime.js library (e.g., color interpolation).\n- **Faster Development:** Being detached from the A-Frame core library means faster\n  iteration of features. Due to being easier to maintain, having more features, and\n  not being tied to A-Frame versions, we can add things quickly such as timeline support.\n\n### API\n\n#### Component Name\n\nBase name is `animation`. Although we can attach multiple animations to one\nentity by name-spacing the component with double underscores (`__`):\n\n```html\n<a-entity animation=\"property: rotation\"\n          animation__2=\"property: position\"\n          animation__color=\"property: material.color\"></a-entity>\n```\n\n#### Properties\n\n| Property    | Description                                                                                                                           | Default Value | Values                  |\n| --------    | -----------                                                                                                                           | ------------- | ------                  |\n| delay       | How long (milliseconds) to wait before starting.                                                                                      | 0             |                         |\n| dir         | Which dir to go from `from` to `to`.                                                                                            | normal        | alternate, reverse      |\n| dur         | How long (milliseconds) each cycle of the animation is.                                                                               | 1000          |                         |\n| easing      | Easing function of animation. To ease in, ease out, ease in and out.                                                                  | easeInQuad    | See [easings](#easings) |\n| elasticity  | How much to bounce (higher is stronger).                                                                                              | 400           |                         |\n| loop        | Whether to repeat animation indefinitely.                                                                                             | false         |                         |\n| pauseEvents | Comma-separated list of events to listen to to pause.                                                                                 | null          |\n| property    | Property to animate. Can be a component name, a dot-delimited property of a component (e.g., `material.color`), or a plain attribute. |               |                         |\n| round       | Whether to round values.                                                                                                              | false         |                         |\n| startEvents | Comma-separated list of events to listen to before playing. Animation will not autoplay if specified.                                 | null          |\n\n\n#### Easings\n\nChoose one type from the `Type` column, and combine it with one function from\nthe `Function` column. For example: `easeInOutElastic`. The only exception is\n`linear` which stands on its own.\n\n| Type      | Function |\n| --------  | -------- |\n| easeIn    | Quad     |\n| easeOut   | Cubic    |\n| easeInOut | Quart    |\n|           | Quint    |\n|           | Expo     |\n|           | Sine     |\n|           | Circ     |\n|           | Elastic  |\n|           | Back     |\n|           | Bounce   |\n\n#### Events\n\n| Property                 | Description                                                               |\n| --------                 | -----------                                                               |\n| animationbegin           | Animation began.                                                          |\n| animationcomplete        | Animation completed.                                                      |\n| animation__<ID>-begin    | Animation completed. Different event emitted depending on animation name. |\n| animation__<ID>-complete | Animation completed. Different event emitted depending on animation name. |\n\n### Installation\n\n#### Browser\n\nInstall and use by directly including the [browser files](dist):\n\n```html\n<head>\n  <title>My A-Frame Scene</title>\n  <script src=\"https://aframe.io/releases/0.3.0/aframe.min.js\"></script>\n  <script src=\"https://rawgit.com/ngokevin/aframe-animation-component/master/dist/aframe-animation-component.min.js\"></script>\n</head>\n\n<body>\n  <a-scene>\n    <a-cylinder color=\"#F55\" radius=\"0.1\"\n                animation=\"property: color; dir: alternate; dur: 1000;\n                           easing: easeInSine; loop: true; to: #5F5\"\n                animation__scale=\"property: scale; dir: alternate; dur: 200;\n                           easing: easeInSine; loop: true; to: 1.2 1 1.2\"\n                animation__yoyo=\"property: position; dir: alternate; dur: 1000;\n                                 easing: easeInSine; loop: true; to: 0 2 0\">\n    </a-cylinder>\n  </a-scene>\n</body>\n```\n\n#### npm\n\nInstall via npm:\n\n```bash\nnpm install aframe-animation-component\n```\n\nThen register and use.\n\n```js\nrequire('aframe');\nrequire('aframe-animation-component');\n```\n","url":"https://unpkg.com/aframe-animation-component@^3.0.2/README.md"}}